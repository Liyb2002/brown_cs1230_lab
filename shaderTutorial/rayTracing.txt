const float FARAWAY=1e30;
const float EPSILON=1e-3;


struct Ray {
    vec3 Origin;
    vec3 Dir;
};

mat3 camera(vec3 cameraPos, vec3 lookAtPoint) {
	vec3 cd = normalize(lookAtPoint - cameraPos); // camera direction
	vec3 cr = normalize(cross(vec3(0, 1, 0), cd)); // camera right
	vec3 cu = normalize(cross(cd, cr)); // camera up
	
	return mat3(-cr, cu, -cd);
}



struct Sphere {
   vec3 Center;
   float R;
};


struct Object {
   Sphere sphere;
};

Object scene[1];

void init_scene() {

   scene[0] = Object(
      Sphere(vec3(0, 0, -7.0),0.5) 
   );



}

bool intersect_sphere(in Ray R, in Sphere S, out float t) {
   vec3 CO = R.Origin - S.Center;
   float a = dot(R.Dir, R.Dir);
   float b = 2.0*dot(R.Dir, CO);
   float c = dot(CO, CO) - S.R*S.R;
   float delta = b*b - 4.0*a*c;
   if(delta < 0.0) {
      return false;
   }
   t = (-b-sqrt(delta)) / (2.0*a);
   return true;
}
 

void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
  
  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;
   init_scene();
   vec3 lp = vec3(0, 0, -4); // lookat point 
   vec3 ro = vec3(0, 0, 3); // ray origin
   vec3 rd = camera(ro, lp) * normalize(vec3(uv, -1)); 
   Ray R = Ray (rd, rd);
   
   
   fragColor = vec4(0.5, 0.5, 1.0, 1.0);

   const float FARAWAY=1e30; 
   float t = FARAWAY;

   vec3 P;  // Point courant
   vec3 N;  // Normale

   for(int i=0; i<scene.length(); ++i) {
       float cur_t;
       if(
          intersect_sphere(R, scene[i].sphere, cur_t) 
          && cur_t < t
       ) {
           t = cur_t;
           P = R.Origin + t*R.Dir;
           vec3 lightDirection = normalize(R.Origin - P);
           N = normalize(P - scene[i].sphere.Center);
           float dif = dot(N, lightDirection);
           vec3 col = vec3(dif)*vec3(0.5,0.9,0.3);
           fragColor = vec4(col, 1.f);
        
   
        }
        }
    }
