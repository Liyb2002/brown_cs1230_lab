// Intersectors: https://iquilezles.org/articles/intersectors
float boxIntersector( vec3 ro, vec3 rd ) 
{
    vec3 boxSize = vec3(1.2);
    vec3 m = 1.0/rd; // can precompute if traversing a set of aligned boxes
    vec3 n = m*ro;   // can precompute if traversing a set of aligned boxes
    vec3 k = abs(m)*boxSize;
    vec3 t1 = -n - k;
    vec3 t2 = -n + k;
    float tN = max( max( t1.x, t1.y ), t1.z );
    float tF = min( min( t2.x, t2.y ), t2.z );
    if( tN>tF || tF<0.0) return -1.0; // no intersection
    return tN;
}

// Raytracer: https://www.youtube.com/watch?v=9g8CdctxmeU
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
   // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;

    // Time varying pixel color
    vec3 col =  vec3( 0, 0.2, 0.4 );

    // Ray
    vec3 ro = vec3( 0.0, 0.0, 4.0 );
    vec3 rd = normalize( vec3( ( -1.0 + 2.0 * uv ) * vec2( 1.78, 1.0 ), -1.0 ) );

    // Intersection
    float id = boxIntersector( ro, rd ) * 1.5; 
    

    // Output to screen
    fragColor = vec4(col + 0.15, 1.0) * id + vec4(col + 0.1, 1.0) * (1.0 - id);
    
}
